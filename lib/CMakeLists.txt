# Define Macros.
macro(M_SUB_DIR_LIST result curdir)
    file(GLOB children RELATIVE ${curdir} ${curdir}/*)
    set(dirlist "")
    foreach(child ${children})
        if(IS_DIRECTORY ${curdir}/${child})
        list(APPEND dirlist ${child})
        endif()
    endforeach()
    set(${result} ${dirlist})
endmacro()

macro(M_SUB_FILE_LIST result curdir)
    file(GLOB children RELATIVE ${curdir} ${curdir}/*)
    set(filelist "")
    foreach(child ${children})
        if(EXISTS ${curdir}/${child})
            list(APPEND filelist ${child})
        endif()
    endforeach()
    set(${result} ${filelist})
endmacro()

macro(M_LIB_NAME result lib)
    string(REGEX REPLACE "^lib" "" name_remove_lib ${lib})
    string(FIND ${name_remove_lib} "." index)
    string(SUBSTRING ${name_remove_lib} 0 ${index} name_remove_extension)
    set(${result} ${name_remove_extension})
endmacro()

macro(M_LIB_EXTENSION result lib)
    string(FIND ${lib} "." index REVERSE)
    string(SUBSTRING ${lib} ${index} -1 extension)
    set(${result} ${extension})
endmacro()


# PROGRAM_LIBRARY_NAMES Variable Check
if(NOT PROGRAM_LIBRARY_NAMES)
    M_SUB_DIR_LIST(PROGRAM_LIBRARY_NAMES ${CMAKE_CURRENT_LIST_DIR})
else()
    foreach(dir ${PROGRAM_LIBRARY_NAMES})
        if(NOT EXISTS "${CMAKE_CURRENT_LIST_DIR}/${dir}")
            message(FATAL_ERROR "Can't find library directory :${dir}")
        endif()
    endforeach()
endif()

# Library Exists Check & Add Library
foreach(subdir ${PROGRAM_LIBRARY_NAMES})
    set(lib_dir "${CMAKE_CURRENT_LIST_DIR}/${subdir}/lib")
    set(lib_include_dir "${CMAKE_CURRENT_LIST_DIR}/${subdir}/include")
    if(NOT EXISTS ${lib_dir})
        message(WARNING "Can't find 'lib' directory in '${subdir}' library")
        continue()
    endif()

    M_SUB_FILE_LIST(lib_file_list ${lib_dir})
    
    foreach(lib_check ${PROGRAM_LIBRARY_FILES})
        if(lib_check IN_LIST lib_file_list)
            if(NOT EXISTS ${lib_include_dir})
                message(FATAL_ERROR "Can't find library include directory :${lib_include_dir}")
            endif()

            M_LIB_NAME(lib_name ${lib_check})
            M_LIB_EXTENSION(lib_extension ${lib_check})

            set(lib_path "${lib_dir}/${lib_check}")

            if(WIN32)
                if(${lib_extension} STREQUAL ".lib")
                    add_library(${lib_check} STATIC IMPORTED GLOBAL)
                    list(APPEND PROGRAM_STATIC_LIBRARIES ${lib_path})  
                elseif(${lib_extension} STREQUAL ".dll")
                    add_library(${lib_check} SHARED IMPORTED GLOBAL)
                    list(APPEND PROGRAM_SHARED_LIBRARIES ${lib_path}) 
                else()
                    message(FATAL_ERROR "Unknown extension :${lib_check}")
                endif()
            else()
                if(${lib_extension} STREQUAL ".a")
                    add_library(${lib_check} STATIC IMPORTED GLOBAL)
                    list(APPEND PROGRAM_STATIC_LIBRARIES ${lib_path}) 
                elseif(${lib_extension} STREQUAL ".so")
                    add_library(${lib_check} SHARED IMPORTED GLOBAL)
                    list(APPEND PROGRAM_SHARED_LIBRARIES ${lib_path}) 
                else()
                    message(FATAL_ERROR "Unknown extension :${lib_check}")
                endif()
            endif()

            set_target_properties(${lib_check} PROPERTIES
                IMPORTED_LOCATION "${lib_path}"
                INTERFACE_INCLUDE_DIRECTORIES "${lib_include_dir}"
            )
            list(APPEND PROGRAM_LIBRARY_TARGETS ${lib_check})

            list(REMOVE_ITEM PROGRAM_LIBRARY_FILES ${lib_check})
            message(STATUS "Find library: ${lib_check}")
        endif()
    endforeach()
endforeach()

if(PROGRAM_LIBRARY_FILES)
    message(FATAL_ERROR "Can't find library :${PROGRAM_LIBRARY_FILES}")
endif()

set(PROGRAM_LIBRARY_TARGETS ${PROGRAM_LIBRARY_TARGETS} PARENT_SCOPE)
set(PROGRAM_STATIC_LIBRARIES ${PROGRAM_STATIC_LIBRARIES} PARENT_SCOPE)
set(PROGRAM_SHARED_LIBRARIES ${PROGRAM_SHARED_LIBRARIES} PARENT_SCOPE)
message(STATUS "Library loading done")