# Define Macros.
macro(M_SUB_FILE_LIST result curdir)
    file(GLOB children RELATIVE ${curdir} ${curdir}/*)
    set(filelist "")
    foreach(child ${children})
        if(EXISTS ${curdir}/${child})
            list(APPEND filelist ${child})
        endif()
    endforeach()
    set(${result} ${filelist})
endmacro()

macro(M_PARENT_DIR result dir)
    string(FIND ${dir} "/" index REVERSE)
    string(SUBSTRING ${dir} 0 ${index} path)
    set(${result} ${path})
endmacro()

macro(M_EXTENSION result file)
    string(FIND ${file} "." index REVERSE)
    if(index EQUAL -1)
        set(${result} ${file})
    else()
        string(SUBSTRING ${file} ${index} -1 extension)
        set(${result} ${extension})
    endif()
endmacro()

if(NOT PROGRAM_SOURCE_FILES)
    M_SUB_FILE_LIST(all_files ${PROGRAM_SOURCE_DIR})
    foreach(file ${all_files})
        M_EXTENSION(extension ${file})
        if(extension IN_LIST PROGRAM_SOURCE_EXTENSIONS)
            list(APPEND PROGRAM_SOURCE_FILES ${file})
        endif()
    endforeach()
else()
    foreach(file ${PROGRAM_SOURCE_FILES})
        if(NOT EXISTS "${PROGRAM_SOURCE_DIR}/${file}")
            message(FATAL_ERROR "Can't find source file :${file}")
        endif()
    endforeach()
endif()

add_executable(${PROGRAM_NAME} ${PROGRAM_SOURCE_FILES})
target_link_libraries(${PROGRAM_NAME} PUBLIC ${PROGRAM_LIBRARY_TARGETS})
target_include_directories(${PROGRAM_NAME} PUBLIC ${PROGRAM_INCLUDE_DIR})# ${LIBRARY_INCLUDE_DIRS})

set(runtime_path)
if(PROGRAM_SHARED_LIBRARIES)
    foreach(lib_dir ${PROGRAM_SHARED_LIBRARIES})
        M_PARENT_DIR(parent ${lib_dir})
        list(APPEND runtime_path "-Wl,-R${parent}")
    endforeach()
endif()

target_link_options(main PUBLIC ${runtime_path})